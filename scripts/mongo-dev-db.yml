- hosts: "{{ HOST }}"
  become: true
  become_user: "{{ become_user }}"
  become_method: su
  gather_facts: true
  #vars:
  #  app_path: sahaj-sql
  #  app_dir: "{{ app_dir }}"
    
  tasks:
    - stat:
        path: "{{ app_path }}/{{ app_dir }}}"
      register: exist

    - name: create "{{ app_path }}/{{ app_dir }}" directory
      file: dest="{{ app_path }}/{{ app_dir }}" state=directory 
      when: exist.stat.exists != True

    - git: 
        repo: http://atul:Atul9911@199.217.116.19/Vara-Internal/mongo-db-dev.git
        dest: "{{ app_path }}/{{ app_dir }}"
        version: "{{ GIT_TAG }}"
        refspec: '+refs/heads/{{ GIT_TAG }}:refs/remotes/origin/{{ GIT_TAG }}'
        update: yes
        force: true
      when: build_type  == "build" 
      register: cloned

    - find:
        paths: "{{ app_path }}/{{ app_dir }}/.git/deploy_info.yml"
        patterns: "*.yml"
      register: deploy_info

    - name: Reverting Changes
      include_vars:
        dir: "{{ item.path }}"
        extensions: ['yml']
      command: "git reset --hard {{ after }}"
      args:
        chdir: "{{ app_path }}/{{ app_dir }}"
      with_items:
          - "{{ deploy_info.files }}"
      when: build_type  == "revert"
    
    #- name: Install python dependency
    #  command: easy_install MySQL-python
    #  become: true
    #  become_user: "{{ become_user }}"
    #   become_method: su



    - find:
        paths: "{{ app_path }}/{{ app_dir }}/{{ scrips_dir }}"
        patterns: "*.js"
      register: files_mongo
      
    - debug: msg="{{ files_mongo.files }}"

    - name: Execute mongodb dump files
      shell: "mongo {{ db_host }}:27017/{{ db_database }}  {{ item.path }}"
      # shell: "mongo mongodb://{{ db_user }}:{{ db_pass }}@{{ db_host }}/{{ db_database }}  {{ item.path }}"
      with_items:
          - "{{ files_mongo.files }}"
      register: mongo_query
      #when: cloned.changed


    - name: Print complete log list
      command: git log --pretty=oneline "{{ cloned.after }}..{{ cloned.before }}"
      args:
        chdir: "{{ app_path }}/{{ app_dir }}"
      register: commits_list

    - name: Ensure Deployment file exist
      copy:
        content: ""
        dest: "{{ app_path }}/{{ app_dir }}/.git/deploy_info.yml"
        force: yes
        mode: 0666
      when: 
        - build_type  == "build" 
        - cloned.before != cloned.after

  
    - name: Save Deployment Info
      lineinfile:
        dest: "{{ app_path }}/{{ app_dir }}/.git/deploy_info.yml"
        line: "{{ item.line }}"
      with_items:
        - {line: 'before: {{ cloned.before }}'}
        - {line: 'after:  {{ cloned.after }}'}
      when: 
        - build_type  == "build" 
        - cloned.before != cloned.after


    #- name: get git version
    #  shell: git rev-parse HEAD
    #  args:
    #    chdir: "{{ app_path }}/{{ app_dir }}"
    #  register: git_version

    #- copy: content="{{ git_version }}" dest=../vars/mongo-db-dev/git_info.json
    #  delegate_to: localhost

    #- name: store it
    #  lineinfile:
    #    dest: "{{ item }}"
    #    line: "last_git_version: {{ git_version.stdout }}"
    #  #command: "echo last_git_version: {{ git_version.stdout }} > {{ item }}"
    #  with_fileglob:
    #    "backup/*"
    #  delegate_to: localhost
    #  register: file_write
    #  become_user: root
    #  become: true
    #  become_method: su
    # - debug: msg="{{ file_write }}"

    - mail:
        host: smtp.gmail.com
        port: 465
        username: atul.agrawal@varaunited.com
        password: Atul@9911
        from: Atul Agrawal <atul.agrawal@varaunited.com>
        to: Atul Agrawal <atul.agrawal@varaunited.com>
        subject: Deployment Status
        body: 'Your deployment has been successfully done.Commits Deployed List<p>{{ commits_list.stdout_lines }}</p>'
      delegate_to: "{{ HOST }}"



    - debug: msg="{{ commits_list.stdout_lines }}"
    - debug: msg="{{ GIT_TAG }}"
    - debug: msg="{{ cloned }}"
    - debug: msg="{{ commits_list }}"
    - debug: msg="{{ mongo_query }}" 
        







         
        
  